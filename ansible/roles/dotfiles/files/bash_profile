#!/bin/bash

###############################
# My bash profile
# used a lot from:
#   https://github.com/mitchellh/dotfiles/blob/master/bashrc
#   http://natelandau.com/my-mac-osx-bash_profile/
###############################

#-------------------------------------------------------------------------------
# Basics
#-------------------------------------------------------------------------------
: ${HOME=~}
: ${LOGNAME=$(id -un)}
: ${UNAME=$(uname)}

# Complete hostnames from this file
: ${HOSTFILE=~/.ssh/known_hosts}

#-------------------------------------------------------------------------------
# Shell Options
#-------------------------------------------------------------------------------
shopt -s histappend

test -r /etc/bash.bashrc && . /etc/bash.bashrc

# Notify bg task completion immediately
set -o notify

# Fucking mail notifications
unset MAILCHECK

# default umask
umask 0022

# Terminal type
case $UNAME in
    CYGWIN* | MINGW32*)
        export TERM=cygwin
        ;;
    *)
        export TERM=xterm-256color
        ;;
esac

#-------------------------------------------------------------------------------
# PATH
#-------------------------------------------------------------------------------
test -f "${HOME}/.profile" && source ${HOME}/.profile
test -f "${HOME}/.bash_aliases" && source ${HOME}/.bash_aliases
# test -f "${HOME}/.bashrc" && source ${HOME}/.bashrc

# texbin if it exists for LaTeX stuff
test -d "/usr/texbin" && PATH="/usr/texbin:${PATH}"

# Heroku toolbelt
test -d "/usr/local/heroku/bin" && PATH="/usr/local/heroku/bin:${PATH}"

# global composer
test -d "${HOME}/.composer/vendor/bin" && PATH="${HOME}/.composer/vendor/bin:${PATH}"

# ~/bin if it exists - want this checked first
test -d "${HOME}/bin" && PATH="${HOME}/bin:${PATH}"

export PATH="/usr/local/bin:${PATH}"

#-------------------------------------------------------------------------------
# Env Configuration
#-------------------------------------------------------------------------------

# detect interactive shell
case "$-" in
    *i*) INTERACTIVE=yes ;;
    *)   unset INTERACTIVE ;;
esac

# detect login shell
case "$0" in
    -*) LOGIN=yes ;;
    *)  unset LOGIN ;;
esac

# Proper locale
: ${LANG:="en_US.UTF-8"}
: ${LANGUAGE:="en"}
: ${LC_CTYPE:="en_US.UTF-8"}
: ${LC_ALL:="en_US.UTF-8"}
export LANG LANGUAGE LC_CTYPE LC_ALL

# Always use passive mode FTP
: ${FTP_PASSIVE:=1}
export FTP_PASSIVE

# Ignore backups, CVS directories
FIGNORE="~:CVS:#:.pyc"
HISTCONTROL=ignoreboth
export HISTFILESIZE=5000

export GREP_OPTIONS='--color=auto'

#-------------------------------------------------------------------------------
# Editor and Pager
#-------------------------------------------------------------------------------
EDITOR="vim"
export EDITOR

PAGER="less -FirSwX"
MANPAGER="$PAGER"
export PAGER MANPAGER

#-------------------------------------------------------------------------------
# Colors / Formatting
#-------------------------------------------------------------------------------
# http://misc.flogisoft.com/bash/tip_colors_and_formatting
WHITE='\033[1;37m'
BLACK='\033[0;30m'
BLUE='\033[0;34m'
LIGHT_BLUE='\033[1;34m'
GREEN='\033[0;32m'
LIGHT_GREEN='\033[1;32m'
CYAN='\033[0;36m'
LIGHT_CYAN='\033[1;36m'
RED='\033[0;31m'
LIGHT_RED='\033[1;31m'
PURPLE='\033[0;35m'
LIGHT_PURPLE='\033[1;35m'
BROWN='\033[0;33m'
YELLOW='\033[1;33m'
GRAY='\033[0;97m'
LIGHT_GRAY='\033[0;37m'
PS_CLEAR='\033[0m'

BOLD='\033[1m'
UL='\033[4m'
BLINK='\033[5m'
DIM='\033[2m'
INVERTED='\033[7m'
HIDDEN='\033[8m'

#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------
COLOR1="${BLUE}"
COLOR2="${BLUE}"
P="\$"

prompt_simple() {
    unset PROMPT_COMMAND
    PS1="\w\$(parse_git_branch) → "
    PS2="> "
}

prompt_min() {
    PS1='\d@\t :: \u@\h:\!\n\#:\w$ '
    PS2="> "
}

prompt_compact() {
    unset PROMPT_COMMAND
    PS1="${COLOR1}${P}${PS_CLEAR} "
    PS2="> "
}

prompt_color_min() {
    PS1="${GREEN}\w\$(parse_git_branch) → ${GRAY}"
    PS2="\[[33;1m\]continue \[[0m[1m\]> "
}

prompt_color() {
    PS1="${GREEN}________________________________________________________________________________\n| \w \$(parse_git_branch) \n| => \[${GRAY}\]"
    PS2="${GREEN}| → \[${GRAY}\]"
}

parse_git_branch() {
    [ -d .git ] || return 1
    git symbolic-ref HEAD 2> /dev/null | sed 's#\(.*\)\/\([^\/]*\)$# \2#'
}

#-------------------------------------------------------------------------------
# BREW
#-------------------------------------------------------------------------------
export HOMEBREW_CASK_OPTS="--appdir=/Applications --caskroom=/etc/Caskroom"

test -d "/Applications" &&
    export PATH="/Applications:${PATH}"

# why?
# -bash: /usr/local/etc/grc.bashrc: Permission denied
# mytmp=$(`brew --prefix`/etc/grc.bashrc)
# test -f mytmp && source mytmp

mytmp=$(brew --prefix coreutils)
if [[ -d mytmp ]]; then
    test -d "${mytmp}/libexec/gnuman" &&
        export MANPATH="${mytmp}/libexec/gnuman:${MANPATH}"

    test -d "${mytmp}/libexec/gnubin" &&
        export PATH="${mytmp}/libexec/gnubin:${PATH}"
fi

# test -d '/usr/local/sbin' &&
#     export PATH="/usr/local/sbin:${PATH}"

#-------------------------------------------------------------------------------
# Python
#-------------------------------------------------------------------------------
# export PYTHONPATH="/usr/local/lib/python2.7/site-packages"

#-------------------------------------------------------------------------------
# Sublime Text 3
#-------------------------------------------------------------------------------

# TODO only show project names
# ([-\w+]+)\.[-\w+]+$
# ls -1 /Users/mwood/sublime_projects/*.sublime-project | grep -Po '([-\w+]+)\.[-\w+]+$'
# echo "/Users/mwood/sublime_projects/mystack.sublime-project" | grep -Po '([-\w+]+)\.[-\w+]+$'

if test -d "${HOME}/sublime_projects"; then
    export ST3_PROJECTS="${HOME}/sublime_projects"

    # open project
    sublp () { subl --project "${ST3_PROJECTS}/${@}.sublime-project"; }

    # list projects
    alias subls="ls ${ST3_PROJECTS}/*.sublime-project"
fi

#-------------------------------------------------------------------------------
# User Shell Environment
#-------------------------------------------------------------------------------

# load custom functions
for dotfile in 'functions' 'venv_wrapper' 'mkpystuff'; do
    test -f "${HOME}/.${dotfile}" && source ${HOME}/.${dotfile};
done

case $UNAME in
    MINGW32*)
        # Don't condense path, since function doesn't work here.
        ;;
    *)
        # Condense path variables
        PATH=$(puniq $PATH)
        MANPATH=$(puniq $MANPATH)
        ;;
esac

# color_prompt=yes

# Set default prompt if interactive
test -n "$PS1" &&
prompt_color

# set term title
# trap 'echo -ne "\033]0;$PWD\007"' DEBUG
